// <auto-generated />
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Models.Model", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("BasePrice")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Data.Models.ModelOption", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("ModelID")
                        .HasColumnType("bigint");

                    b.Property<long>("OptionID")
                        .HasColumnType("bigint");

                    b.Property<long>("OptionTypeID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("ModelID");

                    b.HasIndex("OptionID");

                    b.HasIndex("OptionTypeID");

                    b.ToTable("ModelOptions");
                });

            modelBuilder.Entity("Data.Models.Option", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("IMG")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OptionTypID")
                        .HasColumnType("bigint");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("OptionTypID");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Data.Models.OptionType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TypID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("TypID");

                    b.ToTable("OptionTypes");
                });

            modelBuilder.Entity("Data.Models.Typ", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Data.Models.ModelOption", b =>
                {
                    b.HasOne("Data.Models.Model", "Model")
                        .WithMany("ModelOptions")
                        .HasForeignKey("ModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.Option", "Option")
                        .WithMany("ModelOptions")
                        .HasForeignKey("OptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.OptionType", "OptionType")
                        .WithMany()
                        .HasForeignKey("OptionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Option");

                    b.Navigation("OptionType");
                });

            modelBuilder.Entity("Data.Models.Option", b =>
                {
                    b.HasOne("Data.Models.OptionType", "OptionType")
                        .WithMany("Options")
                        .HasForeignKey("OptionTypID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptionType");
                });

            modelBuilder.Entity("Data.Models.OptionType", b =>
                {
                    b.HasOne("Data.Models.Typ", "Typ")
                        .WithMany("OptionTypes")
                        .HasForeignKey("TypID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Typ");
                });

            modelBuilder.Entity("Data.Models.Model", b =>
                {
                    b.Navigation("ModelOptions");
                });

            modelBuilder.Entity("Data.Models.Option", b =>
                {
                    b.Navigation("ModelOptions");
                });

            modelBuilder.Entity("Data.Models.OptionType", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Data.Models.Typ", b =>
                {
                    b.Navigation("OptionTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
